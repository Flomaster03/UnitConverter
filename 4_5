fun main() {
    while (true) {
        print("Enter what you want to convert (or exit): ")
        val inputStr = readln()
        if (inputStr == "exit") {
            break
        } else {
            val inputList = inputStr.split(" ")
            val inputCount = inputList[0].toDouble()
            val inputUnit = inputList[1].lowercase()
            val outputUnit = inputList[3].lowercase()
            val outputStr = checkInput(inputCount, inputUnit, outputUnit)
            println(outputStr)
        }
    }
}

//содержится ли входящая единица измерения в классе единиц измерения
//аргументы: массив единиц измерений, название единицы измерения для конвертации, ее категория
//выход: содержится ли входящая единица измерения в этом массиве, категория этого массива,
// ключ и первое значение в массиве единиц измерения (чтобы определить потом ед/мн число)
fun foundInBase(
    base: Array<Map<String, List<String>>>,
    unit: String,
    category: String
): Triple<Boolean, String, Array<String>> {
    var isContain = false
    var mapData = emptyArray<String>()
    outerLoop@ for (i in base.indices) {
        for ((k, u) in base[i]) {
            if (u.contains(unit)) {
                mapData += k
                mapData += u[0]
                isContain = true
                break@outerLoop
            }
        }
    }
    return Triple(isContain, category, mapData)
}

//формирует выходную строку в зависимости от входных единиц.
fun checkInput(count: Double, inputUnit: String, outputUnit: String): String {
    val key = listOf("length", "weight")                            //в какой категории искать
    val arrayOfUnit = arrayOf(UnitBase().length, UnitBase().weight) //массив из величин

    var inputUnitToString = "???"
    val number: Double
    var outputUnitToString = outputUnit
    for (i in arrayOfUnit.indices) {
        val inputCheckUnit = foundInBase(arrayOfUnit[i], inputUnit, key[i])
        if (inputCheckUnit.first) {
            inputUnitToString = if (count == 1.0) inputCheckUnit.third[0] else inputCheckUnit.third[1]
            val outputCheckUnit = foundInBase(arrayOfUnit[i], outputUnit, key[i])
            if (outputCheckUnit.first) {
                number = when (i) {
                    0 -> convertLength(count, inputCheckUnit.third[0], outputCheckUnit.third[0])
                    1 -> convertWeight(count, inputCheckUnit.third[0], outputCheckUnit.third[0])
                    else -> break
                }
                outputUnitToString = if (number == 1.0) outputCheckUnit.third[0] else outputCheckUnit.third[1]
                return "$count $inputUnitToString is $number $outputUnitToString"
            }
            inputUnitToString = inputCheckUnit.third[1]
            break
        }
    }
    return "Conversion from $inputUnitToString to $outputUnitToString is impossible"
}

//конвертация единиц длины
fun convertLength(count: Double, inputUnit: String, outputUnit: String): Double {
    val meters = when (inputUnit) {
        "kilometer" -> count * 1000.0
        "millimeter" -> count * 0.001
        "centimeter" -> count * 0.01
        "meter" -> count
        "mile" -> count * 1609.35
        "yard" -> count * 0.9144
        "foot" -> count * 0.3048
        "inch" -> count * 0.0254
        else -> -1.0
    }
    return when (outputUnit) {
        "kilometer" -> meters / 1000.0
        "millimeter" -> meters / 0.001
        "centimeter" -> meters / 0.01
        "meter" -> meters / 1
        "mile" -> meters / 1609.35
        "yard" -> meters / 0.9144
        "foot" -> meters / 0.3048
        "inch" -> meters / 0.0254
        else -> -1.0
    }
}

//конвертация единиц веса
fun convertWeight(count: Double, inputUnit: String, outputUnit: String): Double {
    val grams = when (inputUnit) {
        "kilogram" -> count * 1000.0
        "milligram" -> count * 0.001
        "gram" -> count
        "pound" -> count * 453.592
        "ounce" -> count * 28.3495
        else -> -1.0
    }
    return when (outputUnit) {
        "kilogram" -> grams / 1000.0
        "milligram" -> grams / 0.001
        "gram" -> grams / 1
        "pound" -> grams / 453.592
        "ounce" -> grams / 28.3495
        else -> -1.0
    }
}

//массив единиц
class UnitBase() {
    val length: Array<Map<String, List<String>>> = arrayOf(
        mapOf("kilometer" to listOf("kilometers", "km", "kilometer")),
        mapOf("millimeter" to listOf("millimeters", "mm", "millimeter")),
        mapOf("centimeter" to listOf("centimeters", "cm", "centimeter")),
        mapOf("meter" to listOf("meters", "m", "meter")),
        mapOf("mile" to listOf("miles", "mi", "mile")),
        mapOf("yard" to listOf("yards", "yd", "yard")),
        mapOf("foot" to listOf("feet", "ft", "foot")),
        mapOf("inch" to listOf("inches", "in", "inch"))
    )
    val weight: Array<Map<String, List<String>>> = arrayOf(
        mapOf("gram" to listOf("grams", "g", "gram")),
        mapOf("kilogram" to listOf("kilograms", "kg", "kilogram")),
        mapOf("milligram" to listOf("milligrams", "mg", "milligram")),
        mapOf("pound" to listOf("pounds", "lb", "pound")),
        mapOf("ounce" to listOf("ounces", "oz", "ounce"))
    )
}

