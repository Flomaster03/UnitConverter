package converter

fun main() {
    while (true) {
        print("Enter what you want to convert (or exit): ")
        val inputStr = readln()
        if (inputStr == "exit") {
            break
        } else {
            val inputArray = formatInputString(inputStr)
            if (inputArray.isEmpty()) {
                println("Parse error")
                continue
            } else {
                val outputStr = checkInput(inputArray[0].toDouble(), inputArray[1], inputArray[3])
                println(outputStr)
            }
        }
    }
}

//обработка входной строки на неправильный ввод и в случае градусов склеивание 2 слов в одну строку
fun formatInputString(str: String): Array<String> {
    val inputList = str.split(" ").map { it.lowercase() }
    if (inputList.size < 4) return emptyArray()
    val outputArray = Array(4) { "" }
    val countOfDegrees = inputList.count { it == "degree" || it == "degrees" } //число слов "градус/ы" в входном листе
    if (inputList[0].matches("-?\\d+.?\\d*".toRegex())) outputArray[0] =
        inputList[0] else return emptyArray() //проверка является ли первое слово числом, если да, то включается в выходной массив в виде строки!
    when (countOfDegrees) {
        0 -> if (inputList.size != 4) {    //если во входной строке нет градусов
            return emptyArray()
        } else {
            outputArray[1] = inputList[1]
            outputArray[3] = inputList[3]
        }

        1 -> if (inputList.size != 5) {
            return emptyArray()
        } else {
            when {
                inputList[1] == "degree" || inputList[1] == "degrees" -> {
                    outputArray[1] = "${inputList[1].lowercase()} ${inputList[2].toCapitalize()}"
                    outputArray[3] = inputList[4]
                }

                inputList[3] == "degree" || inputList[3] == "degrees" -> {
                    outputArray[1] = inputList[1]
                    outputArray[3] = "${inputList[3].lowercase()} ${inputList[4].toCapitalize()}"
                }

                else -> return emptyArray()
            }
        }

        2 -> if (inputList.size != 6) {
            return emptyArray()
        } else {
            if ((inputList[1] == "degree" || inputList[1] == "degrees") &&
                (inputList[4] == "degree" || inputList[4] == "degrees")
            ) {
                outputArray[1] = "${inputList[1].lowercase()} ${inputList[2].toCapitalize()}"
                outputArray[3] = "${inputList[4].lowercase()} ${inputList[5].toCapitalize()}"
            } else {
                return emptyArray()
            }
        }
    }
    return outputArray
}

//extention функция для преобразования слова в нижний регистр с заглавной буквой
fun String.toCapitalize(): String {
    val a = this.lowercase()
    return a[0].uppercase() + a.substring(1)
}


//содержится ли входящая единица измерения в базе единиц измерения
//аргумент: название единицы измерения для проверки
//выход: содержится ли входящая единица измерения в базе; категория, в которой она содержится и
// ед. и мн.числа этого значения (в массиве)
fun foundInBase(unit: String): Triple<Boolean, String, Array<String>> {
    val inputUnit = if (unit.contains("degree") || unit.contains("degrees")) unit else unit.lowercase()
    var isContain = false
    var category = ""
    val unitInSingularAndPlural = arrayOf("", "")  //названия единицы в единственном и множественном числах
    outerLoop@ for (k in UnitBase.base.keys) {  //перебор в ключах базы (категориях)
        val arr = UnitBase.base[k] ?: break
        for (i in arr.indices) {
            if (arr[i].contains(inputUnit)) {
                unitInSingularAndPlural[0] = arr[i][0] // единственное число
                unitInSingularAndPlural[1] = arr[i][1] // множественное число
                category = k
                isContain = true
                break@outerLoop
            }
        }
    }
    return Triple(isContain, category, unitInSingularAndPlural)
}

//формирует выходную строку в зависимости от входных единиц.
fun checkInput(count: Double, inputUnit: String, outputUnit: String): String {
    var inputUnitToString = "???"
    var outputUnitToString = "???"
    val inputCheckUnit = foundInBase(inputUnit) //проверка для входящей единицы
    if ((inputCheckUnit.second == "length" || inputCheckUnit.second == "weight") && count < 0.0) return "${inputCheckUnit.second} shouldn't be negative" //если отрицательная длина или вес
    val outputCheckUnit = foundInBase(outputUnit)  //проверка для исходящей единицы

    if (inputCheckUnit.first) inputUnitToString = if (count == 1.0) inputCheckUnit.third[0] else inputCheckUnit.third[1]
    //формирование строки, если входящая и исходящая единицы существуют в базе и принадлежат одной системе измерений
    if (inputCheckUnit.first && outputCheckUnit.first && inputCheckUnit.second == outputCheckUnit.second) {
        val numberAfterConvert = when (inputCheckUnit.second) {
            "length" -> convertLength(count, inputCheckUnit.third[0], outputCheckUnit.third[0])
            "weight" -> convertWeight(count, inputCheckUnit.third[0], outputCheckUnit.third[0])
            "temperature" -> convertTemperature(count, inputCheckUnit.third[0], outputCheckUnit.third[0])
            else -> -1.0
        }
        outputUnitToString = if (numberAfterConvert == 1.0) outputCheckUnit.third[0] else outputCheckUnit.third[1]
        return "$count $inputUnitToString is $numberAfterConvert $outputUnitToString"
    }
    if (outputCheckUnit.first) outputUnitToString = outputCheckUnit.third[1]
    if (inputCheckUnit.first) inputUnitToString = inputCheckUnit.third[1]
    return "Conversion from $inputUnitToString to $outputUnitToString is impossible"
}

//конвертация единиц длины (сначало в метры, из метров в нужные единицы)
fun convertLength(count: Double, inputUnit: String, outputUnit: String): Double {
    val meters = when (inputUnit) {
        "kilometer" -> count * 1000.0
        "millimeter" -> count * 0.001
        "centimeter" -> count * 0.01
        "meter" -> count
        "mile" -> count * 1609.35
        "yard" -> count * 0.9144
        "foot" -> count * 0.3048
        "inch" -> count * 0.0254
        else -> -1.0
    }
    return when (outputUnit) {
        "kilometer" -> meters / 1000.0
        "millimeter" -> meters / 0.001
        "centimeter" -> meters / 0.01
        "meter" -> meters / 1
        "mile" -> meters / 1609.35
        "yard" -> meters / 0.9144
        "foot" -> meters / 0.3048
        "inch" -> meters / 0.0254
        else -> -1.0
    }
}

//конвертация единиц веса (сначало в граммы, из них в нужные единицы)
fun convertWeight(count: Double, inputUnit: String, outputUnit: String): Double {
    val grams = when (inputUnit) {
        "kilogram" -> count * 1000.0
        "milligram" -> count * 0.001
        "gram" -> count
        "pound" -> count * 453.592
        "ounce" -> count * 28.3495
        else -> -1.0
    }
    return when (outputUnit) {
        "kilogram" -> grams / 1000.0
        "milligram" -> grams / 0.001
        "gram" -> grams / 1
        "pound" -> grams / 453.592
        "ounce" -> grams / 28.3495
        else -> -1.0
    }
}

//конвертация температуры
fun convertTemperature(count: Double, inputUnit: String, outputUnit: String): Double {
    return when (inputUnit) {
        "degree Celsius" -> if (outputUnit == "degree Fahrenheit") (count * 9.0 / 5.0) + 32.0 else if (outputUnit == "kelvin") count + 273.15 else count
        "degree Fahrenheit" -> if (outputUnit == "degree Celsius") (count - 32) * 5.0 / 9.0 else if (outputUnit == "kelvin") (count + 459.67) * 5.0 / 9.0 else count
        "kelvin" -> if (outputUnit == "degree Celsius") count - 273.15 else if (outputUnit == "degree Fahrenheit") (count * 9.0 / 5.0) - 459.67 else count
        else -> -1.0
    }
}

//массив единиц
object UnitBase {
    val base = mapOf(
        "length" to arrayOf(
            arrayOf("kilometer", "kilometers", "km"),
            arrayOf("millimeter", "millimeters", "mm"),
            arrayOf("centimeter", "centimeters", "cm"),
            arrayOf("meter", "meters", "m"),
            arrayOf("mile", "miles", "mi"),
            arrayOf("yard", "yards", "yd"),
            arrayOf("foot", "feet", "ft"),
            arrayOf("inch", "inches", "in")
        ),
        "weight" to arrayOf(
            arrayOf("gram", "grams", "g"),
            arrayOf("kilogram", "kilograms", "kg"),
            arrayOf("milligram", "milligrams", "mg"),
            arrayOf("pound", "pounds", "lb"),
            arrayOf("ounce", "ounces", "oz")
        ),
        "temperature" to arrayOf(
            arrayOf("degree Celsius", "degrees Celsius", "celsius", "dc", "c"),
            arrayOf("degree Fahrenheit", "degrees Fahrenheit", "fahrenheit", "df", "f"),
            arrayOf("kelvin", "kelvins", "k")
        )
    )
}
    
